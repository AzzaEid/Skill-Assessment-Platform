// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillAssessmentPlatform.Infrastructure.Data;

#nullable disable

namespace SkillAssessmentPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513093608_add-notificationT")]
    partial class addnotificationT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExaminerTrack", b =>
                {
                    b.Property<string>("ExaminersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkingTracksId")
                        .HasColumnType("int");

                    b.HasKey("ExaminersId", "WorkingTracksId");

                    b.HasIndex("WorkingTracksId");

                    b.ToTable("ExaminerTracks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Certificates_and_Notifications.AppCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeveProgressId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LeveProgressId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Certificates_and_Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("TrackId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.DetailedFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CriterionId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("DetailedFeedbacks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.EvaluationCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("EvaluationCriteria");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExaminerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.LevelProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelProgresses");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NoOfAttempts")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.StageProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LevelProgressId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminerId");

                    b.HasIndex("LevelProgressId");

                    b.HasIndex("StageId");

                    b.ToTable("StageProgresses");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TaskPoolId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TaskPoolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExaminerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionsType")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StageId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.ExamRequest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamRequests");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDaysToBook")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StageId")
                        .IsUnique();

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.InterviewBook", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("InterviewId");

                    b.ToTable("InterviewBooks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskApplicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskApplicants");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TaskApplicantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId")
                        .IsUnique();

                    b.HasIndex("TaskApplicantId");

                    b.ToTable("TaskSubmissions");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TasksPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysToSubmit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StageId")
                        .IsUnique();

                    b.ToTable("TasksPools");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociatedSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeniorExaminerID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SeniorExaminerID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.ExaminerLoad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CurrWorkLoad")
                        .HasColumnType("int");

                    b.Property<string>("ExaminerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxWorkLoad")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExaminerID");

                    b.ToTable("ExaminerLoads");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Applicant", b =>
                {
                    b.HasBaseType("SkillAssessmentPlatform.Core.Entities.Users.User");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Applicants", (string)null);
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Examiner", b =>
                {
                    b.HasBaseType("SkillAssessmentPlatform.Core.Entities.Users.User");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Examiners", (string)null);
                });

            modelBuilder.Entity("ExaminerTrack", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", null)
                        .WithMany()
                        .HasForeignKey("ExaminersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("WorkingTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Certificates_and_Notifications.AppCertificate", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Applicant")
                        .WithMany("Certificates")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.LevelProgress", "LevelProgress")
                        .WithMany("Certificates")
                        .HasForeignKey("LeveProgressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("LevelProgress");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Certificates_and_Notifications.Notification", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Enrollment", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Applicant")
                        .WithMany("Enrollments")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Track", "Track")
                        .WithMany("Enrollments")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.DetailedFeedback", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.EvaluationCriteria", "EvaluationCriteria")
                        .WithMany("DetailedFeedbacks")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", "Feedback")
                        .WithMany("DetailedFeedbacks")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationCriteria");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.EvaluationCriteria", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Stage", "Stage")
                        .WithMany("EvaluationCriteria")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "Examiner")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ExaminerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Level", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Track", "Track")
                        .WithMany("Levels")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.LevelProgress", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Enrollment", "Enrollment")
                        .WithMany("LevelProgresses")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Level", "Level")
                        .WithMany("LevelProgresses")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Stage", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Level", "Level")
                        .WithMany("Stages")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.StageProgress", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "Examiner")
                        .WithMany("SupervisedStages")
                        .HasForeignKey("ExaminerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.LevelProgress", "LevelProgress")
                        .WithMany("StageProgresses")
                        .HasForeignKey("LevelProgressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Stage", "Stage")
                        .WithMany("StageProgresses")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Examiner");

                    b.Navigation("LevelProgress");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.AppTask", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TasksPool", "TasksPool")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskPoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TasksPool");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Appointment", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "Examiner")
                        .WithMany("Appointments")
                        .HasForeignKey("ExaminerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Exam", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Stage", "Stage")
                        .WithOne("Exam")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Exam", "StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.ExamRequest", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Applicant")
                        .WithMany("ExamRequests")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Exam", "Exam")
                        .WithMany("ExamRequests")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", "Feedback")
                        .WithOne("ExamRequest")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.ExamRequest", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Exam");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Interview", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Stage", "Stage")
                        .WithOne("Interview")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Interview", "StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.InterviewBook", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Applicant")
                        .WithMany("InterviewBooks")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Appointment", "Appointment")
                        .WithMany("InterviewBooks")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", "Feedback")
                        .WithOne("InterviewBook")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.InterviewBook", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Interview", "Interview")
                        .WithMany("InterviewBooks")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Appointment");

                    b.Navigation("Feedback");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskApplicant", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Applicant")
                        .WithMany("TaskApplicants")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.AppTask", "Task")
                        .WithMany("TaskApplicants")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskSubmission", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", "Feedback")
                        .WithOne("TaskSubmission")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskSubmission", "FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskApplicant", "TaskApplicant")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("TaskApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("TaskApplicant");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TasksPool", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Stage", "Stage")
                        .WithOne("TasksPool")
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TasksPool", "StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Track", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "SeniorExaminer")
                        .WithMany("ManagedTracks")
                        .HasForeignKey("SeniorExaminerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SeniorExaminer");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.ExaminerLoad", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "Examiner")
                        .WithMany("ExaminerLoads")
                        .HasForeignKey("ExaminerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Applicant", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.Applicant", null)
                        .WithMany("Applicants")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Users.Applicant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Examiner", b =>
                {
                    b.HasOne("SkillAssessmentPlatform.Core.Entities.Users.User", null)
                        .WithOne()
                        .HasForeignKey("SkillAssessmentPlatform.Core.Entities.Users.Examiner", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Enrollment", b =>
                {
                    b.Navigation("LevelProgresses");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.EvaluationCriteria", b =>
                {
                    b.Navigation("DetailedFeedbacks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Feedback_and_Evaluation.Feedback", b =>
                {
                    b.Navigation("DetailedFeedbacks");

                    b.Navigation("ExamRequest")
                        .IsRequired();

                    b.Navigation("InterviewBook")
                        .IsRequired();

                    b.Navigation("TaskSubmission")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Level", b =>
                {
                    b.Navigation("LevelProgresses");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.LevelProgress", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("StageProgresses");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Stage", b =>
                {
                    b.Navigation("EvaluationCriteria");

                    b.Navigation("Exam")
                        .IsRequired();

                    b.Navigation("Interview")
                        .IsRequired();

                    b.Navigation("StageProgresses");

                    b.Navigation("TasksPool")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.AppTask", b =>
                {
                    b.Navigation("TaskApplicants");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Appointment", b =>
                {
                    b.Navigation("InterviewBooks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Exam", b =>
                {
                    b.Navigation("ExamRequests");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.Interview", b =>
                {
                    b.Navigation("InterviewBooks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TaskApplicant", b =>
                {
                    b.Navigation("TaskSubmissions");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Tasks__Exams__and_Interviews.TasksPool", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Track", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Applicant", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("Certificates");

                    b.Navigation("Enrollments");

                    b.Navigation("ExamRequests");

                    b.Navigation("InterviewBooks");

                    b.Navigation("TaskApplicants");
                });

            modelBuilder.Entity("SkillAssessmentPlatform.Core.Entities.Users.Examiner", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExaminerLoads");

                    b.Navigation("Feedbacks");

                    b.Navigation("ManagedTracks");

                    b.Navigation("SupervisedStages");
                });
#pragma warning restore 612, 618
        }
    }
}
